generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?
  products      Products[]

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime? @default(now()) @map(name: "created_at")
  updatedAt  DateTime? @default(now()) @map(name: "updated_at")

  @@unique([id, token])
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String      @db.ObjectId
  billboards Billboard[] @relation("StoreBillboard")
  categories Category[]  @relation("StoreCategory")
  sizes      Size[]      @relation("StoreSize")
  colors     Color[]     @relation("StoreColor")
  products   Product[]
  inventory  Inventory[]
  createdAt  DateTime?   @default(now()) @map(name: "created_at")
  updatedAt  DateTime?   @default(now()) @map(name: "updated_at")
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation("StoreBillboard", fields: [storeId], references: [id])
  label      String
  image      String
  createdAt  DateTime?  @default(now()) @map(name: "created_at")
  updatedAt  DateTime?  @default(now()) @map(name: "updated_at")
  categories Category[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model Size {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String      @db.ObjectId
  store     Store       @relation("StoreSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  inventory Inventory[]

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model Color {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String      @db.ObjectId
  store     Store       @relation("StoreColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  inventory Inventory[]

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String      @db.ObjectId
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isAchieved Boolean     @default(false)
  sizeId     String      @db.ObjectId
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  inventory  Inventory[]
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model Inventory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String  @db.ObjectId
  store     Store   @relation(fields: [storeId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String  @db.ObjectId
  size      Size    @relation(fields: [sizeId], references: [id])
  colorId   String  @db.ObjectId
  color     Color   @relation(fields: [colorId], references: [id])
  quantity  Int

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}

model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    String?
  price       Float
  images      String[]
  inventory   Int
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @default(now()) @map(name: "updated_at")
}
